import React, { useState, useRef, useEffect } from "react";
import OpenAI from "openai";
import "./ChatApp.css";

function ChatApp() {
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const messagesEndRef = useRef(null);

  // 환경 변수에서 API 키 가져오기
  // (주의: 클라이언트 측에서 API 키 노출은 보안상 위험할 수 있습니다)
  const OPENAI_API_KEY = import.meta.env.VITE_OPENAI_API_KEY;

  // OpenAI 클라이언트 초기화
  const openai = new OpenAI({
    apiKey: OPENAI_API_KEY,
    dangerouslyAllowBrowser: true, // 브라우저에서 사용 시 필요한 옵션 (보안 주의)
  });

  // 메시지 목록이 업데이트될 때마다 스크롤을 맨 아래로 이동
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  };

  const handleSendMessage = async (e) => {
    e.preventDefault();
    if (!inputMessage.trim()) return;

    // 사용자 메시지 추가
    const userMessage = {
      role: "user",
      content: inputMessage,
    };

    setMessages((prevMessages) => [...prevMessages, userMessage]);
    setInputMessage("");
    setIsLoading(true);

    try {
      // 기존 대화 컨텍스트 구성
      const apiMessages = [...messages, userMessage].map((msg) => ({
        role: msg.role,
        content: msg.content,
      }));

      // OpenAI API 패키지를 사용하여 호출
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: apiMessages,
        max_tokens: 100,
        temperature: 0.7,
      });

      // AI 응답 추가
      setMessages((prevMessages) => [
        ...prevMessages,
        {
          role: "assistant",
          content: completion.choices[0].message.content,
        },
      ]);
    } catch (error) {
      console.error("Error calling OpenAI API:", error);

      // 에러 메시지 추가
      setMessages((prevMessages) => [
        ...prevMessages,
        {
          role: "system",
          content: `오류가 발생했습니다: ${error.message}`,
        },
      ]);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <div className="chat-container">
      <div className="chat-header">
        <h2>OpenAI 채팅</h2>
      </div>
      <div className="messages-container">
        {messages.length === 0 ? (
          <div className="empty-chat">
            <p>AI와 대화를 시작하세요</p>
          </div>
        ) : (
          messages.map((message, index) => (
            <div
              key={index}
              className={`message ${
                message.role === "user"
                  ? "user-message"
                  : message.role === "system"
                  ? "system-message"
                  : "ai-message"
              }`}
            >
              <div className="message-content">{message.content}</div>
            </div>
          ))
        )}
        {isLoading && (
          <div className="message ai-message">
            <div className="message-content loading">
              <span>.</span>
              <span>.</span>
              <span>.</span>
            </div>
          </div>
        )}
        <div ref={messagesEndRef} />
      </div>
      <form className="input-form" onSubmit={handleSendMessage}>
        <input
          type="text"
          value={inputMessage}
          onChange={(e) => setInputMessage(e.target.value)}
          placeholder="메시지를 입력하세요..."
          disabled={isLoading}
        />
        <button type="submit" disabled={isLoading || !inputMessage.trim()}>
          전송
        </button>
      </form>
    </div>
  );
}

export default ChatApp;
